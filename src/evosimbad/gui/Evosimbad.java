/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Evosimbad.java
 *
 * Created on Oct 19, 2011, 1:45:45 PM
 */
package evosimbad.gui;

import au.com.bytecode.opencsv.CSVWriter;
import evosimbad.commons.CSVLogger;
import evosimbad.commons.ImageTracer;
import evosimbad.core.ComponentLoader;
import evosimbad.core.EvaluationFunction;
import evosimbad.core.EvolutionProgressListener;
import evosimbad.core.Logger;
import evosimbad.simulation.SimpleSimulationBuilder;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.neat4j.neat.nn.core.NeuralNet;

/**
 *
 * @author Jorge
 */
public class Evosimbad extends javax.swing.JFrame implements EvolutionProgressListener {

    /**
     * Creates new form Evosimbad
     */
    public Evosimbad() {
        initComponents();
        chooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainProgress = new javax.swing.JProgressBar();
        outputPaneScroll = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextPane();
        timeElapsedLabel = new javax.swing.JLabel();
        etaField = new javax.swing.JTextField();
        etaLabel = new javax.swing.JLabel();
        timeElapsedField = new javax.swing.JTextField();
        detailedProgress = new javax.swing.JProgressBar();
        timeGenField = new javax.swing.JTextField();
        timeGenLabel = new javax.swing.JLabel();
        noWrapPanel = new javax.swing.JPanel();
        configPaneScroll = new javax.swing.JScrollPane();
        configPane = new javax.swing.JTextPane();
        bestFitField = new javax.swing.JTextField();
        bestFitLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        evolutionMenu = new javax.swing.JMenu();
        setup = new javax.swing.JMenuItem();
        start = new javax.swing.JMenuItem();
        stop = new javax.swing.JMenuItem();
        batchSeparator = new javax.swing.JPopupMenu.Separator();
        batch = new javax.swing.JMenuItem();
        individualsMenu = new javax.swing.JMenu();
        showBest = new javax.swing.JMenuItem();
        loadIndividual = new javax.swing.JMenuItem();
        evaluateIndividual = new javax.swing.JMenuItem();
        reevaluate = new javax.swing.JMenuItem();
        metaReevaluate = new javax.swing.JMenuItem();
        metaTrace = new javax.swing.JMenuItem();
        traceAllBests = new javax.swing.JMenuItem();
        loadIndividualExperiment = new javax.swing.JMenuItem();
        logMenu = new javax.swing.JMenu();
        saveLogs = new javax.swing.JMenuItem();
        trace = new javax.swing.JMenuItem();
        aggregator = new javax.swing.JMenuItem();
        showNetwork = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Evo Simbad");

        outputPane.setEditable(false);
        outputPane.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        outputPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        outputPaneScroll.setViewportView(outputPane);

        timeElapsedLabel.setText("Time:");

        etaField.setEditable(false);
        etaField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        etaField.setText("--");

        etaLabel.setText("ETA:");

        timeElapsedField.setEditable(false);
        timeElapsedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        timeElapsedField.setText("--");

        detailedProgress.setPreferredSize(new java.awt.Dimension(146, 10));

        timeGenField.setEditable(false);
        timeGenField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        timeGenField.setText("--");

        timeGenLabel.setText("Time/gen:");

        noWrapPanel.setLayout(new java.awt.BorderLayout());

        configPane.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        configPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        configPaneScroll.setViewportView(configPane);

        noWrapPanel.add(configPaneScroll, java.awt.BorderLayout.CENTER);

        bestFitField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bestFitField.setText("--");

        bestFitLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bestFitLabel.setText("Best fit:");

        fileMenu.setText("File");

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        fileMenu.add(open);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        fileMenu.add(save);

        saveAs.setText("Save as");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        fileMenu.add(saveAs);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        menuBar.add(fileMenu);

        evolutionMenu.setText("Evolution");

        setup.setText("Setup");
        setup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupActionPerformed(evt);
            }
        });
        evolutionMenu.add(setup);

        start.setText("Start evolution");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        evolutionMenu.add(start);

        stop.setText("Stop evolution");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });
        evolutionMenu.add(stop);
        evolutionMenu.add(batchSeparator);

        batch.setText("Run batch");
        batch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchActionPerformed(evt);
            }
        });
        evolutionMenu.add(batch);

        menuBar.add(evolutionMenu);

        individualsMenu.setText("Individuals");

        showBest.setText("Show best individual");
        showBest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBestActionPerformed(evt);
            }
        });
        individualsMenu.add(showBest);

        loadIndividual.setText("Run individual");
        loadIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadIndividualActionPerformed(evt);
            }
        });
        individualsMenu.add(loadIndividual);

        evaluateIndividual.setText("Evaluate individual");
        evaluateIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateIndividualActionPerformed(evt);
            }
        });
        individualsMenu.add(evaluateIndividual);

        reevaluate.setText("Re-evaluate");
        reevaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reevaluateActionPerformed(evt);
            }
        });
        individualsMenu.add(reevaluate);

        metaReevaluate.setText("Meta re-evaluate");
        metaReevaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaReevaluateActionPerformed(evt);
            }
        });
        individualsMenu.add(metaReevaluate);

        metaTrace.setText("Meta trace");
        metaTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaTraceActionPerformed(evt);
            }
        });
        individualsMenu.add(metaTrace);

        traceAllBests.setText("Trace all bests");
        traceAllBests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceAllBestsActionPerformed(evt);
            }
        });
        individualsMenu.add(traceAllBests);

        loadIndividualExperiment.setText("Load experiment+individual");
        loadIndividualExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadIndividualExperimentActionPerformed(evt);
            }
        });
        individualsMenu.add(loadIndividualExperiment);

        menuBar.add(individualsMenu);

        logMenu.setText("Log");

        saveLogs.setText("Save logs");
        saveLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLogsActionPerformed(evt);
            }
        });
        logMenu.add(saveLogs);

        trace.setText("Trace individual");
        trace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceActionPerformed(evt);
            }
        });
        logMenu.add(trace);

        aggregator.setText("Log aggregator");
        aggregator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggregatorActionPerformed(evt);
            }
        });
        logMenu.add(aggregator);

        showNetwork.setText("Show network");
        showNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNetworkActionPerformed(evt);
            }
        });
        logMenu.add(showNetwork);

        menuBar.add(logMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addComponent(detailedProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addComponent(outputPaneScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bestFitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bestFitField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeElapsedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeElapsedField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeGenLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeGenField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(etaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etaField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(noWrapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(241, Short.MAX_VALUE)
                .addComponent(mainProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailedProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etaLabel)
                    .addComponent(timeGenField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeGenLabel)
                    .addComponent(timeElapsedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeElapsedLabel)
                    .addComponent(bestFitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestFitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPaneScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(noWrapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addGap(171, 171, 171)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private ComponentLoader main;
    private File loadedFile = null;
    private JFileChooser chooser;

    private void appendOutput(String text) {
        try {
            Document doc = outputPane.getDocument();
            doc.insertString(doc.getLength(), text, null);
        } catch (BadLocationException e) {
            System.out.println("Failed to append text: " + e);
        }
    }

    private void setupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupActionPerformed
        try {
            main = new ComponentLoader(configPane.getText());
            statusMessage("Classes instantiated");
            main.getEvolutionMethod().addProgressListener(this);
            main.init();
            statusMessage("Setup completed");
        } catch (Exception ex) {
            ex.printStackTrace();
            statusMessage(ex.getMessage());
        }
    }//GEN-LAST:event_setupActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if (main == null) {
            statusMessage("Need to setup experience first\n");
        } else if (main.getEvolutionMethod().isEvolving()) {
            statusMessage("Experiment is already running\n");
        } else {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    main.getEvolutionMethod().evolve();
                }
            });
            t.start();
            detailedProgress.setIndeterminate(true);
        }
    }//GEN-LAST:event_startActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        if (main == null || !main.getEvolutionMethod().isEvolving()) {
            statusMessage("No experience running\n");
        } else {
            statusMessage("Stoping...\n");
            main.getEvolutionMethod().stopEvolution();
        }
    }//GEN-LAST:event_stopActionPerformed

    private void showBestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBestActionPerformed
        NeuralNet bestIndividual = main.getEvolutionMethod().getBestIndividual();
        if (bestIndividual == null) {
            statusMessage("No individuals yet");
        } else {
            main.getSimulator().showIndividual(bestIndividual);
        }
    }//GEN-LAST:event_showBestActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        if (main != null) {
            main.getLogger().flush();
        }
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            try {
                String conf = FileUtils.readFileToString(selectedFile);
                configPane.setText(conf);
                loadedFile = selectedFile;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_openActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if (loadedFile != null) {
            try {
                FileUtils.writeStringToFile(loadedFile, configPane.getText());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            saveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            try {
                FileUtils.writeStringToFile(selectedFile, configPane.getText());
                loadedFile = selectedFile;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveAsActionPerformed

    private void loadIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadIndividualActionPerformed
        if (main != null) {
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();
                try {
                    Pair<NeuralNet, String> ind = Logger.loadIndividual(selectedFile);
                    main.getSimulator().showIndividual(ind.getLeft());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            statusMessage("There must be a loaded experiment. Try load experiment+individual");
        }
    }//GEN-LAST:event_loadIndividualActionPerformed

    private void loadIndividualExperimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadIndividualExperimentActionPerformed
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            try {
                Pair<NeuralNet, String> ind = Logger.loadIndividual(selectedFile);
                configPane.setText(ind.getRight());
                this.setupActionPerformed(null);
                main.getSimulator().showIndividual(ind.getLeft());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_loadIndividualExperimentActionPerformed

    private void saveLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLogsActionPerformed
        if (main != null) {
            try {
                main.getLogger().saveLogs();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveLogsActionPerformed

    private void batchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchActionPerformed
        if (main != null && main.getEvolutionMethod().isEvolving()) {
            statusMessage("Experiment is already running\n");
        } else {
            String repetions = JOptionPane.showInputDialog("Number of repetitions:");
            final int reps = Integer.parseInt(repetions);
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < reps; i++) {
                        detailedProgress.setIndeterminate(false);
                        detailedProgress.setMaximum(reps);
                        detailedProgress.setValue(i);
                        statusMessage("Repetition " + (i + 1) + "/" + reps);
                        setupActionPerformed(null);
                        main.getEvolutionMethod().evolve();
                        try {
                            main.getLogger().saveLogs();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                    detailedProgress.setValue(reps);
                }
            });
            t.start();
        }
    }//GEN-LAST:event_batchActionPerformed

private void aggregatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggregatorActionPerformed
    if (main != null && (main.getLogger() instanceof CSVLogger)) {
        final File folder = ((CSVLogger) main.getLogger()).getBaseFolder();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Aggregator ag = new Aggregator(folder);
                ag.setLocationRelativeTo(Evosimbad.this);
                ag.setVisible(true);
            }
        });
    } else {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Aggregator ag = new Aggregator();
                ag.setLocationRelativeTo(Evosimbad.this);
                ag.setVisible(true);
            }
        });
    }
}//GEN-LAST:event_aggregatorActionPerformed

    private void traceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceActionPerformed
        if (main != null) {
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();
                try {
                    Pair<NeuralNet, String> ind = Logger.loadIndividual(selectedFile);
                    main.getLogger().traceBehaviour(ind.getLeft(), selectedFile.getName());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_traceActionPerformed

private void showNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showNetworkActionPerformed
    /*
     * if (main != null) { if (chooser.showOpenDialog(this) ==
     * JFileChooser.APPROVE_OPTION) { File selectedFile =
     * chooser.getSelectedFile(); try { Pair<NeuralNet, String> ind =
     * Logger.loadIndividual(selectedFile); NeuralNet net = (NeuralNet)
     * ind.getLeft(); List<NeuralNet> neurons = net.getNeurons(); List<String>
     * inputs = main.getAgentGen().getInputs(); List<String> outputs =
     * main.getAgentGen().getOutputs(); int inputIndex = 0, outputIndex = 0;
     * Graph<Long, Double> g = new DirectedSparseMultigraph<>(); for (NeuralNet
     * n : neurons) { g.addVertex(n.getNeuronID()); String name = ""; if
     * (n.getNeuronType() == NEATNeuronType.Input) { name =
     * inputs.get(inputIndex++); } else if(n.getNeuronType() ==
     * NEATNeuronType.Output) { name = outputs.get(outputIndex++); } else
     * if(n.getNeuronType() == NEATNeuronType.Bias) { name = "Bias"; } else {
     * name = "Hidden" + n.getNeuronID(); }
     *
     * }
     * for (NEATNeuron n : neurons) { List<NEATLink> links =
     * n.getOutputboundLinks(); for (NEATLink l : links) {
     * g.addEdge(l.getWeight(), l.getFromNeuron().getNeuronID(),
     * l.getToNeuron().getNeuronID(), EdgeType.DIRECTED); } }
     *
     * Layout<Long, Double> layout = new DAGLayout(g); layout.setSize(new
     * Dimension(1900, 1000)); BasicVisualizationServer<Long, Double> vv = new
     * BasicVisualizationServer<>(layout); vv.setPreferredSize(new
     * Dimension(1900, 1000)); //Sets the viewing area size
     * vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
     * vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
     *
     * JFrame frame = new JFrame("Simple Graph View");
     * frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     * frame.getContentPane().add(vv); frame.pack(); frame.setVisible(true);
     *
     * } catch (Exception ex) { ex.printStackTrace(); } } } else {
     * statusMessage("There must be a loaded experiment.");
     }
     */
}//GEN-LAST:event_showNetworkActionPerformed

    private void evaluateIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateIndividualActionPerformed
        if (main != null) {
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();
                int reps = 10;
                String times = JOptionPane.showInputDialog("How many times?", reps);
                if (times != null) {
                    reps = Integer.parseInt(times);
                }
                reps = Math.max(1, reps);
                try {
                    Pair<NeuralNet, String> ind = Logger.loadIndividual(selectedFile);
                    Set<NeuralNet> net = new HashSet<>();
                    net.add(ind.getLeft());
                    List<EvaluationFunction> evals = new ArrayList<>(100);
                    for (int i = 0; i < reps; i++) {
                        HashMap<NeuralNet, List<EvaluationFunction>> results = main.getSimulator().runExperiments(net);
                        evals.addAll(results.get(ind.getLeft()));
                    }
                    double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY, avg = 0;
                    for (EvaluationFunction ef : evals) {
                        double fitness = ef.getFitness();
                        min = Math.min(min, fitness);
                        max = Math.max(max, fitness);
                        avg += fitness;
                    }
                    avg /= evals.size();
                    JOptionPane.showMessageDialog(this, "Average: " + avg + "\nMin: " + min + "\nMax: " + max);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_evaluateIndividualActionPerformed

    private void reevaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reevaluateActionPerformed
        if (main != null) {
            JFileChooser dirChooser = new JFileChooser();
            dirChooser.setCurrentDirectory(chooser.getCurrentDirectory());
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (dirChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File folder = dirChooser.getSelectedFile();
                int reps = 10;
                String times = JOptionPane.showInputDialog("How many times?", reps);
                if (times != null) {
                    reps = Integer.parseInt(times);
                }
                reps = Math.max(1, reps);
                try {
                    reevaluate(folder, reps);
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_reevaluateActionPerformed

    private void metaReevaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaReevaluateActionPerformed
        if (main != null) {
            JFileChooser dirChooser = new JFileChooser();
            dirChooser.setCurrentDirectory(chooser.getCurrentDirectory());
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (dirChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File folder = dirChooser.getSelectedFile();
                int reps = Integer.parseInt(JOptionPane.showInputDialog("How many times?", 10));
                File[] exps = folder.listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return new File(dir, name).isDirectory() && name.startsWith("201");
                    }
                });
                System.out.println("Re-evaluating...");
                for (File f : exps) {
                    try {
                        File bests = new File(f, "Individuals/bests");
                        System.out.println(bests.getAbsolutePath());
                        reevaluate(bests, reps);
                    } catch (IOException ex) {
                        java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                System.out.println("Aggregating");
                String config = "Best so far - AVG ;\nBest so far - ALL ;\nHarmonic mean - AVG ;\nHarmonic mean - ALL;\nBest so far ari - AVG ;\nBest so far ari - ALL;\nArithmetic mean - AVG ;\nArithmetic mean - ALL;\nStdev - AVG";
                try {
                    Aggregator.aggregate(folder, "bestreevaluation.csv", folder.getName(), config, new File(folder, "reevaluation.csv"));
                } catch (Exception ex) {
                    java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_metaReevaluateActionPerformed

    private void metaTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaTraceActionPerformed
        if (main != null) {
            JFileChooser dirChooser = new JFileChooser();
            dirChooser.setCurrentDirectory(chooser.getCurrentDirectory());
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (dirChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                chooser.setCurrentDirectory(dirChooser.getCurrentDirectory());
                File folder = dirChooser.getSelectedFile();
                int nBests = Integer.parseInt(JOptionPane.showInputDialog("How many bests?", 1));
                int reps = Integer.parseInt(JOptionPane.showInputDialog("How many times?", 1));
                File[] exps = folder.listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return new File(dir, name).isDirectory() && !name.equals("Traces");
                    }
                });
                List<File> fileList = Arrays.asList(exps);
                Collections.sort(fileList, new Comparator<File>() {
                    @Override
                    public int compare(File o1, File o2) {
                        return o1.getName().compareTo(o2.getName());
                    }
                });
                System.out.println("Tracing...");
                for (File f : fileList) {
                    File bests = new File(f, "Individuals/bests/sorted/");
                    System.out.println(bests.getAbsolutePath());
                    try {
                        metaTrace(bests, nBests, reps, new File(folder, "Traces/"), f.getName());
                    } catch (Exception ex) {
                        java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_metaTraceActionPerformed

    private void traceAllBestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceAllBestsActionPerformed
        if (main != null) {
            JFileChooser dirChooser = new JFileChooser();
            dirChooser.setCurrentDirectory(chooser.getCurrentDirectory());
            dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (dirChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                chooser.setCurrentDirectory(dirChooser.getCurrentDirectory());
                File folder = dirChooser.getSelectedFile();
                File[] exps = folder.listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return new File(dir, name).isDirectory() && !name.equals("Traces");
                    }
                });
                System.out.println("Tracing...");
                for (File f : exps) {
                    File bests = new File(f, "Individuals/bests/sorted/");
                    File output = new File(f, "Individuals/bests/traces");
                    System.out.println(bests.getAbsolutePath());
                    ((SimpleSimulationBuilder) main.getSimulationBuilder()).setSamples(1);
                    ImageTracer tracer = new ImageTracer(main.getSimulationBuilder());
                    File[] inds = bests.listFiles(new FilenameFilter() {
                        @Override
                        public boolean accept(File dir, String name) {
                            return name.endsWith(".ind");
                        }
                    });
                    for (File ind : inds) {
                        System.out.print(".");
                        try {
                            Pair<NeuralNet, String> loaded = Logger.loadIndividual(ind);
                            tracer.trace(loaded.getLeft(), ind.getName().replace(".ind", ""), output);
                        } catch (Exception ex) {
                            java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    System.out.println();
                }
            }
        } else {
            statusMessage("There must be a loaded experiment.");
        }
    }//GEN-LAST:event_traceAllBestsActionPerformed

    private void metaTrace(File bests, int nBests, int reps, File outputFolder, String expName) throws Exception {
        ((SimpleSimulationBuilder) main.getSimulationBuilder()).setSamples(reps);
        ImageTracer tracer = new ImageTracer(main.getSimulationBuilder());

        File[] inds = bests.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".ind");
            }
        });
        List<File> sortedInds = Arrays.asList(inds);
        Collections.sort(sortedInds, new Comparator<File>() {
            @Override
            public int compare(File o1, File o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        Collections.reverse(sortedInds);
        for (int i = 0; i < nBests; i++) {
            File ind = sortedInds.get(i);
            System.out.println("Tracing: " + ind.getAbsolutePath());
            Pair<NeuralNet, String> loaded = Logger.loadIndividual(ind);
            tracer.trace(loaded.getLeft(), expName + "_" + ind.getName(), outputFolder);
        }
    }

    private void reevaluate(File folder, int times) throws IOException {
        File output = new File(folder, "bestreevaluation.csv");
        if (output.exists()) {
            return;
        }

        // read file structure
        File[] fs = folder.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".ind");
            }
        });
        List<File> fileList = Arrays.asList(fs);
        String sample = fs[0].getName();
        String[] split = sample.split("\\d+");
        final String prefix = split[0];
        final String suffix = split[1];

        // sort file list
        Collections.sort(fileList, new Comparator<File>() {
            @Override
            public int compare(File o1, File o2) {
                String id1 = o1.getName().replace(prefix, "").replace(suffix, "");
                String id2 = o2.getName().replace(prefix, "").replace(suffix, "");
                int int1 = Integer.parseInt(id1);
                int int2 = Integer.parseInt(id2);
                return Integer.compare(int1, int2);
            }
        });

        // load individuals
        Map<File, NeuralNet> nets = new HashMap<>();
        for (File f : fileList) {
            try {
                Pair<NeuralNet, String> ind = Logger.loadIndividual(f);
                nets.put(f, ind.getLeft());
            } catch (Exception ex) {
                java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // run the experiments
        ((SimpleSimulationBuilder) main.getSimulationBuilder()).setSamples(10);
        int n = times / 10;
        HashMap<NeuralNet, List<EvaluationFunction>> results = new HashMap<>();
        for (int i = 0; i < n; i++) {
            System.out.println(i);
            HashMap<NeuralNet, List<EvaluationFunction>> exps = main.getSimulator().runExperiments(new HashSet<>(nets.values()));
            for (NeuralNet net : exps.keySet()) {
                if (results.containsKey(net)) {
                    results.get(net).addAll(exps.get(net));
                } else {
                    results.put(net, exps.get(net));
                }
            }
        }

        // assemble the results
        CSVWriter writer = new CSVWriter(new FileWriter(output), '\t');
        writer.writeNext(new String[]{"Order", "Best so far", "Harmonic mean", "Best so far ari", "Arithmetic mean", "Stdev", "Min", "Max"});
        double previousBest = Double.NEGATIVE_INFINITY;
        double previousBestAri = Double.NEGATIVE_INFINITY;
        HashMap<File, Double> fitnessMap = new HashMap<>();
        for (File f : fileList) {
            NeuralNet net = nets.get(f);
            List<EvaluationFunction> evals = results.get(net);
            double min = Double.POSITIVE_INFINITY;
            double max = Double.NEGATIVE_INFINITY;
            double arithmeticMean = 0;
            double harmonicMean = 0;
            for (EvaluationFunction e : evals) {
                double fitness = e.getFitness();
                harmonicMean += 1 / Math.max(fitness, 0.0001);
                min = Math.min(min, fitness);
                max = Math.max(max, fitness);
                arithmeticMean += fitness;
            }
            harmonicMean = evals.size() / harmonicMean;
            arithmeticMean = arithmeticMean / evals.size();
            if (harmonicMean > previousBest) {
                previousBest = harmonicMean;
            }
            if (arithmeticMean > previousBestAri) {
                previousBestAri = arithmeticMean;
            }
            fitnessMap.put(f, harmonicMean);
            double stdev = 0;
            for (EvaluationFunction e : evals) {
                stdev += Math.pow(e.getFitness() - arithmeticMean, 2);
            }
            stdev = Math.sqrt((1.0 / (evals.size() - 1)) * stdev);
            String id = f.getName().replace(prefix, "").replace(suffix, "");
            writer.writeNext(new String[]{id, Double.toString(previousBest), Double.toString(harmonicMean),
                        Double.toString(previousBestAri), Double.toString(arithmeticMean), Double.toString(stdev), Double.toString(min), Double.toString(max)});
        }
        writer.close();

        // copy and sort the individuals according to fitness
        File sortedFolder = new File(folder, "sorted");
        for (File ind : fitnessMap.keySet()) {
            double fit = fitnessMap.get(ind);
            String name = String.format("%1$.4f", fit) + "_" + ind.getName();
            File dest = new File(sortedFolder, name);
            FileUtils.copyFile(ind, dest);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Evosimbad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Evosimbad().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aggregator;
    private javax.swing.JMenuItem batch;
    private javax.swing.JPopupMenu.Separator batchSeparator;
    private javax.swing.JTextField bestFitField;
    private javax.swing.JLabel bestFitLabel;
    private javax.swing.JTextPane configPane;
    private javax.swing.JScrollPane configPaneScroll;
    private javax.swing.JProgressBar detailedProgress;
    private javax.swing.JTextField etaField;
    private javax.swing.JLabel etaLabel;
    private javax.swing.JMenuItem evaluateIndividual;
    private javax.swing.JMenu evolutionMenu;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu individualsMenu;
    private javax.swing.JMenuItem loadIndividual;
    private javax.swing.JMenuItem loadIndividualExperiment;
    private javax.swing.JMenu logMenu;
    private javax.swing.JProgressBar mainProgress;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem metaReevaluate;
    private javax.swing.JMenuItem metaTrace;
    private javax.swing.JPanel noWrapPanel;
    private javax.swing.JMenuItem open;
    private javax.swing.JTextPane outputPane;
    private javax.swing.JScrollPane outputPaneScroll;
    private javax.swing.JMenuItem reevaluate;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JMenuItem saveLogs;
    private javax.swing.JMenuItem setup;
    private javax.swing.JMenuItem showBest;
    private javax.swing.JMenuItem showNetwork;
    private javax.swing.JMenuItem start;
    private javax.swing.JMenuItem stop;
    private javax.swing.JTextField timeElapsedField;
    private javax.swing.JLabel timeElapsedLabel;
    private javax.swing.JTextField timeGenField;
    private javax.swing.JLabel timeGenLabel;
    private javax.swing.JMenuItem trace;
    private javax.swing.JMenuItem traceAllBests;
    // End of variables declaration//GEN-END:variables

    @Override
    public void iterationChanged(final int iteration, final int max) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                mainProgress.setMaximum(max);
                mainProgress.setValue(iteration);
                etaField.setText(formatTime(main.getEvolutionMethod().estimatedTimeArrival()));
                timeElapsedField.setText(formatTime(main.getEvolutionMethod().totalEvolutionTime()));
                timeGenField.setText(formatTime(main.getEvolutionMethod().averageTimePerGeneration()));
                bestFitField.setText(String.format("%.4f", main.getEvolutionMethod().getBestFitness()));
            }
        });
    }

    @Override
    public void evolutionStoped() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                detailedProgress.setIndeterminate(false);

            }
        });
    }

    public String formatTime(long elapsedTime) {
        String format = String.format("%%0%dd", 2);
        elapsedTime = elapsedTime / 1000;
        String seconds = String.format(format, elapsedTime % 60);
        String minutes = String.format(format, (elapsedTime % 3600) / 60);
        String hours = String.format(format, elapsedTime / 3600);
        String time = hours + ":" + minutes + ":" + seconds;
        return time;
    }

    @Override
    public void statusMessage(final String message) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                appendOutput(message + "\n");
            }
        });
    }
}
